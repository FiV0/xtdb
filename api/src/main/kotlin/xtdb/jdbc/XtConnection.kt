package xtdb.jdbc

import clojure.lang.Keyword
import org.postgresql.core.BaseConnection
import org.postgresql.jdbc.PgConnection
import org.postgresql.util.PGobject
import xtdb.util.TransitFormat.JSON
import xtdb.util.readTransit
import java.sql.*
import xtdb.decode as decodeJson

internal class XtConnection(private val conn: PgConnection) : BaseConnection by conn {

    internal class XtResultSet(private val inner: ResultSet) : ResultSet by inner {
        private fun getPgObject(columnIndex: Int) = inner.getObject(columnIndex, PGobject::class.java)?.value

        override fun getObject(columnIndex: Int): Any? =
            when (inner.metaData.getColumnTypeName(columnIndex)) {
                "transit" -> getPgObject(columnIndex)?.encodeToByteArray()?.let { readTransit(it, JSON) }
                "keyword" -> getPgObject(columnIndex)?.let { Keyword.intern(it) }
                "json", "jsonb" -> getPgObject(columnIndex)?.let { decodeJson(it) }

                else -> inner.getObject(columnIndex)
            }

        override fun getObject(columnLabel: String): Any? = getObject(findColumn(columnLabel))

        override fun getObject(columnIndex: Int, map: Map<String, Class<*>>?): Any? =
            if (map.isNullOrEmpty()) getObject(columnIndex)
            else throw SQLFeatureNotSupportedException("getObject(Int, Map)")

        override fun getObject(columnLabel: String, map: Map<String, Class<*>>?): Any? =
            getObject(findColumn(columnLabel), map)

        override fun <T : Any?> getObject(columnIndex: Int, type: Class<T>): T = inner.getObject(columnIndex, type)
        override fun <T : Any?> getObject(columnLabel: String?, type: Class<T>): T = inner.getObject(columnLabel, type)
    }

    internal inner class XtStatement(private val inner: Statement) : Statement by inner {
        override fun executeQuery(sql: String) = XtResultSet(inner.executeQuery(sql))
        override fun getResultSet() = XtResultSet(inner.resultSet)
        override fun getConnection() = this@XtConnection
    }

    internal inner class XtCallableStatement(private val inner: CallableStatement) : CallableStatement by inner

    internal inner class XtPreparedStatement(private val inner: PreparedStatement) : PreparedStatement by inner {
        override fun getResultSet() = XtResultSet(inner.resultSet)

        override fun executeQuery() = XtResultSet(inner.executeQuery())
        override fun executeQuery(sql: String) = XtResultSet(inner.executeQuery(sql))
        override fun getGeneratedKeys() = XtResultSet(inner.generatedKeys)
    }

    override fun createStatement() = XtStatement(conn.createStatement())

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int) =
        XtStatement(conn.createStatement(resultSetType, resultSetConcurrency))

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int) =
        XtStatement(conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability))

    override fun prepareCall(sql: String) = XtCallableStatement(conn.prepareCall(sql))

    override fun prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int) =
        XtCallableStatement(conn.prepareCall(sql, resultSetType, resultSetConcurrency))

    override fun prepareCall(
        sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int
    ) = XtCallableStatement(conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability))

    override fun prepareStatement(sql: String) = XtPreparedStatement(conn.prepareStatement(sql))

    override fun prepareStatement(sql: String, autoGeneratedKeys: Int) =
        XtPreparedStatement(conn.prepareStatement(sql, autoGeneratedKeys))

    override fun prepareStatement(sql: String, columnIndexes: IntArray?) =
        XtPreparedStatement(conn.prepareStatement(sql, columnIndexes))

    override fun prepareStatement(sql: String, columnNames: Array<out String>?) =
        XtPreparedStatement(conn.prepareStatement(sql, columnNames))

    override fun prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int) =
        XtPreparedStatement(conn.prepareStatement(sql, resultSetType, resultSetConcurrency))

    override fun prepareStatement(
        sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int
    ) = XtPreparedStatement(conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability))
}