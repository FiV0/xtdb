bo-sql-1: |
  SELECT _id AS user_id, first_name, last_name FROM users

bo-sql-2: |
  SELECT first_name, last_name
  FROM users
  WHERE _id = 'ivan'

bo-sql-3: |
  SELECT _id AS user_id, first_name, last_name
  FROM users
  ORDER BY last_name, first_name
  LIMIT 10

joins-sql-1: |
  SELECT u._id AS user_id, u.first_name, u.last_name,
         a.title, a.content
  FROM users u
    JOIN articles a ON u._id = a.author_id

joins-sql-2: |
  SELECT u1._id AS uid1, u2._id AS uid2, u1.age
  FROM users u1
    JOIN users u2 ON (u1.age = u2.age)
  WHERE u1._id <> u2._id

joins-sql-3: |
  SELECT c._id AS cid, o.currency, o.order_value
  FROM customers c
    LEFT JOIN orders o ON (c._id = o.customer_id)
  LIMIT 100

joins-sql-4: |
  SELECT _id AS cid
  FROM customers c
  WHERE _id NOT IN (SELECT orders.customer_id FROM orders)
  LIMIT 100

proj-sql-1: |
  SELECT first_name, last_name, (first_name || ' ' || last_name) AS full_name
  FROM users AS u

proj-sql-2: |
  SELECT (u.first_name || ' ' || u.last_name) AS full_name, a.title, a.content
  FROM users AS u
    JOIN articles a ON u._id = a.author_id

proj-sql-3: |
  SELECT u.first_name, u.last_name, a.title, a.content
  FROM users AS u
    JOIN articles a ON u._id = a.author_id

aggr-sql-1: |
  SELECT c._id AS cid, o.currency, COUNT(o._id) AS order_count, COALESCE(SUM(o.order_value), 0) AS total_value
  FROM customers c
    LEFT JOIN orders o ON (c._id = o.customer_id)
  GROUP BY c._id, o.currency
  ORDER BY total_value DESC
  LIMIT 100

pull-sql-1: |
  -- using XTDB's 'NEST_ONE'/'NEST_MANY'

  FROM articles AS a
  SELECT _id AS article_id, title, content, author_id,
         NEST_ONE(FROM authors WHERE _id = a.author_id
                  SELECT first_name, last_name)
           AS author,
         NEST_MANY(FROM comments WHERE article_id = a._id
                   SELECT created_at, comment
                   ORDER BY created_at DESC
                   LIMIT 10)
           AS comments

bitemp-sql-1: |
  SELECT first_name, last_name FROM users FOR VALID_TIME AS OF DATE '2020-01-01'

bitemp-sql-2: |
  SELECT first_name, last_name FROM users FOR ALL VALID_TIME

DML-Insert-sql: |
  INSERT INTO users
  SELECT _id, given_name AS first_name, surname AS last_name,
         _valid_from, _valid_to
  FROM old_users

DML-Delete-sql: |
  DELETE FROM comments WHERE post_id = ?

DML-Delete-additional-unify-clauses-sql: |
  DELETE FROM comments
  WHERE post_id IN (SELECT _id FROM posts WHERE author_id = ?)

DML-Delete-bitemporal-sql: |
  DELETE FROM promotions
  FOR PORTION OF VALID_TIME FROM DATE '2023-12-26'
  WHERE promotion_type = 'christmas'

DML-Delete-everything-sql: |
  DELETE FROM comments

DML-Update-sql: |
  UPDATE documents
  SET version = version + 1
  WHERE _id = ?

DML-Update-bitemporal-sql-1: |
  INSERT INTO comments (_id, post_id) VALUES (?, ?)

DML-Update-bitemporal-sql-2: |
  UPDATE posts AS p
  SET comment_count = (SELECT COUNT(*) FROM comments WHERE post_id = ?)
  WHERE post_id = ?

DML-Erase-sql: |
  ERASE FROM users WHERE email = 'jms@example.com'

DML-Assert-Not-sql: |
  ASSERT NOT EXISTS (SELECT 1 FROM users WHERE email = 'james@example.com')
